/*
 * max77686.h - Voltage regulator driver for the Maxim 77686
 *
 *  Copyright (C) 2010 Samsung Electrnoics
 *  MyungJoo Ham <myungjoo.ham@samsung.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef __LINUX_MFD_MAX77686_PRIV_H
#define __LINUX_MFD_MAX77686_PRIV_H

#include <linux/i2c.h>

#define MAX77686_REG_INVALID	(0xff)

enum max77686_pmic_reg {
	MAX77686_REG_DEVICE_ID	= 0x00,
	MAX77686_REG_INTSRC		= 0x01,
	MAX77686_REG_INT1		= 0x02,
	MAX77686_REG_INT2		= 0x03,
	MAX77686_REG_INT1MSK	= 0x04,
	MAX77686_REG_INT2MSK	= 0x05,

	MAX77686_REG_STATUS1	= 0x06,
	MAX77686_REG_STATUS2	= 0x07,

	MAX77686_REG_PWRON		= 0x08,
	MAX77686_REG_ONOFFDELAY	= 0x09,
	MAX77686_REG_MRSTB		= 0x0a,

	MAX77686_REG_BUCK1CTRL	= 0x10,
	MAX77686_REG_BUCK1OUT	= 0x11,

	MAX77686_REG_BUCK2CTRL1	= 0x12,
	MAX77686_REG_BUCK234FREQ= 0x13,
	MAX77686_REG_BUCK2DVS1	= 0x14,
	MAX77686_REG_BUCK2DVS2	= 0x15,
	MAX77686_REG_BUCK2DVS3	= 0x16,
	MAX77686_REG_BUCK2DVS4	= 0x17,
	MAX77686_REG_BUCK2DVS5	= 0x18,
	MAX77686_REG_BUCK2DVS6	= 0x19,
	MAX77686_REG_BUCK2DVS7	= 0x1a,
	MAX77686_REG_BUCK2DVS8	= 0x1b,

	MAX77686_REG_BUCK3CTRL1	= 0x1c,
	MAX77686_REG_BUCK3DVS1	= 0x1e,
	MAX77686_REG_BUCK3DVS2	= 0x1f,
	MAX77686_REG_BUCK3DVS3	= 0x20,
	MAX77686_REG_BUCK3DVS4	= 0x21,
	MAX77686_REG_BUCK3DVS5	= 0x22,
	MAX77686_REG_BUCK3DVS6	= 0x23,
	MAX77686_REG_BUCK3DVS7	= 0x24,
	MAX77686_REG_BUCK3DVS8	= 0x25,

	MAX77686_REG_BUCK4CTRL1	= 0x26,
	MAX77686_REG_BUCK4DVS1	= 0x28,
	MAX77686_REG_BUCK4DVS2	= 0x29,
	MAX77686_REG_BUCK4DVS3	= 0x2a,
	MAX77686_REG_BUCK4DVS4	= 0x2b,
	MAX77686_REG_BUCK4DVS5	= 0x2c,
	MAX77686_REG_BUCK4DVS6	= 0x2d,
	MAX77686_REG_BUCK4DVS7	= 0x2e,
	MAX77686_REG_BUCK4DVS8	= 0x2f,

	MAX77686_REG_BUCK5CTRL	= 0x30,
	MAX77686_REG_BUCK5OUT	= 0x31,
	MAX77686_REG_BUCK6CTRL	= 0x32,
	MAX77686_REG_BUCK6OUT	= 0x33,
	MAX77686_REG_BUCK7CTRL	= 0x34,
	MAX77686_REG_BUCK7OUT	= 0x35,
	MAX77686_REG_BUCK8CTRL	= 0x36,
	MAX77686_REG_BUCK8OUT	= 0x37,
	MAX77686_REG_BUCK9CTRL	= 0x38,
	MAX77686_REG_BUCK9OUT	= 0x39,

	MAX77686_REG_LDO1CTRL1	= 0x40,
	MAX77686_REG_LDO2CTRL1	= 0x41,
	MAX77686_REG_LDO3CTRL1	= 0x42,
	MAX77686_REG_LDO4CTRL1	= 0x43,
	MAX77686_REG_LDO5CTRL1	= 0x44,
	MAX77686_REG_LDO6CTRL1	= 0x45,
	MAX77686_REG_LDO7CTRL1	= 0x46,
	MAX77686_REG_LDO8CTRL1	= 0x47,
	MAX77686_REG_LDO9CTRL1	= 0x48,
	MAX77686_REG_LDO10CTRL1	= 0x49,
	MAX77686_REG_LDO11CTRL1	= 0x4a,
	MAX77686_REG_LDO12CTRL1	= 0x4b,
	MAX77686_REG_LDO13CTRL1	= 0x4c,
	MAX77686_REG_LDO14CTRL1	= 0x4d,
	MAX77686_REG_LDO15CTRL1	= 0x4e,
	MAX77686_REG_LDO16CTRL1	= 0x4f,
	MAX77686_REG_LDO17CTRL1	= 0x50,
	MAX77686_REG_LDO18CTRL1	= 0x51,
	MAX77686_REG_LDO19CTRL1	= 0x52,
	MAX77686_REG_LDO20CTRL1	= 0x53,
	MAX77686_REG_LDO21CTRL1	= 0x54,
	MAX77686_REG_LDO22CTRL1	= 0x55,
	MAX77686_REG_LDO23CTRL1	= 0x56,
	MAX77686_REG_LDO24CTRL1	= 0x57,
	MAX77686_REG_LDO25CTRL1	= 0x58,
	MAX77686_REG_LDO26CTRL1	= 0x59,

	MAX77686_REG_LDO1CTRL2	= 0x60,
	MAX77686_REG_LDO2CTRL2	= 0x61,
	MAX77686_REG_LDO3CTRL2	= 0x62,
	MAX77686_REG_LDO4CTRL2	= 0x63,
	MAX77686_REG_LDO5CTRL2	= 0x64,
	MAX77686_REG_LDO6CTRL2	= 0x65,
	MAX77686_REG_LDO7CTRL2	= 0x66,
	MAX77686_REG_LDO8CTRL2	= 0x67,
	MAX77686_REG_LDO9CTRL2	= 0x68,
	MAX77686_REG_LDO10CTRL2	= 0x69,
	MAX77686_REG_LDO11CTRL2	= 0x6a,
	MAX77686_REG_LDO12CTRL2	= 0x6b,
	MAX77686_REG_LDO13CTRL2	= 0x6c,
	MAX77686_REG_LDO14CTRL2	= 0x6d,
	MAX77686_REG_LDO15CTRL2	= 0x6e,
	MAX77686_REG_LDO16CTRL2	= 0x6f,
	MAX77686_REG_LDO17CTRL2	= 0x70,
	MAX77686_REG_LDO18CTRL2	= 0x71,
	MAX77686_REG_LDO19CTRL2	= 0x72,
	MAX77686_REG_LDO20CTRL2	= 0x73,
	MAX77686_REG_LDO21CTRL2	= 0x74,
	MAX77686_REG_LDO22CTRL2	= 0x75,
	MAX77686_REG_LDO23CTRL2	= 0x76,
	MAX77686_REG_LDO24CTRL2	= 0x77,
	MAX77686_REG_LDO25CTRL2	= 0x78,
	MAX77686_REG_LDO26CTRL2	= 0x79,

	MAX77686_REG_BBAT_CHARGER= 0x7e,
	MAX77686_REG_32KHZ		= 0x7f,

	MAX77686_REG_PMIC_END	= 0x80,
};

/* slave addr = 0x0c: using "2nd part" of rev4 datasheet */
enum max77686_rtc_reg {
	MAX77686_RTC_INT		= 0x00,
	MAX77686_RTC_INTM		= 0x01,
	MAX77686_RTC_RTCCNTLM	= 0x02,
	MAX77686_RTC_RTCCNTL	= 0x03,
	MAX77686_RTC_UPDATE0	= 0x04,

	MAX77686_RTC_SMPL		= 0x06,
	MAX77686_RTC_SEC		= 0x07,
	MAX77686_RTC_MIN		= 0x08,
	MAX77686_RTC_HOUR		= 0x09,
	MAX77686_RTC_DOW		= 0x0a,
	MAX77686_RTC_MONTH		= 0x0b,
	MAX77686_RTC_YEAR		= 0x0c,
	MAX77686_RTC_DOM		= 0x0d,

	MAX77686_RTC_ALARM1_SEC		= 0x0e,
	MAX77686_RTC_ALARM1_MIN		= 0x0f,
	MAX77686_RTC_ALARM1_HOUR	= 0x10,
	MAX77686_RTC_ALARM1_DOW		= 0x11,
	MAX77686_RTC_ALARM1_MONTH	= 0x12,
	MAX77686_RTC_ALARM1_YEAR	= 0x13,
	MAX77686_RTC_ALARM1_DOM		= 0x14,

	MAX77686_RTC_ALARM2_SEC		= 0x15,
	MAX77686_RTC_ALARM2_MIN		= 0x16,
	MAX77686_RTC_ALARM2_HOUR	= 0x17,
	MAX77686_RTC_ALARM2_DOW		= 0x18,
	MAX77686_RTC_ALARM2_MONTH	= 0x19,
	MAX77686_RTC_ALARM2_YEAR	= 0x1a,
	MAX77686_RTC_ALARM2_DOM		= 0x1b,

};

enum max77686_irq_source {
	PMIC_INT1 = 0,
	PMIC_INT2,
	MAX77686_IRQ_GROUP_NR,
};

enum max77686_irq {
	MAX77686_TOPSYSIRQ_PWRONF,
	MAX77686_TOPSYSIRQ_PWRONR,
	MAX77686_TOPSYSIRQ_JIGONF,
	MAX77686_TOPSYSIRQ_JIGONR,
	MAX77686_TOPSYSIRQ_ACOKBF,
	MAX77686_TOPSYSIRQ_ACOKBR,
	MAX77686_TOPSYSIRQ_ONKEY1S,
	MAX77686_TOPSYSIRQ_MRSTB,

	MAX77686_TOPSYSIRQ_120C,
	MAX77686_TOPSYSIRQ_140C,
	MAX77686_IRQ_NR,
};

#define MAX77686_NUM_GPIO	12
struct max77686_dev {
	struct device *dev;
	struct i2c_client *i2c; /* 0xcc / PMIC, Battery Control, and FLASH */
	struct i2c_client *rtc; /* slave addr 0x0c */
	struct mutex iolock;

	int type;
	struct platform_device *battery; /* battery control (not fuel gauge) */

	int irq;
	int ono;
	int irq_base;
	struct mutex irqlock;
	int irq_masks_cur[MAX77686_IRQ_GROUP_NR];
	int irq_masks_cache[MAX77686_IRQ_GROUP_NR];

	/* For hibernation */
	u8 reg_dump[MAX77686_REG_PMIC_END];

};

extern int max77686_irq_init(struct max77686_dev *max77686);
extern void max77686_irq_exit(struct max77686_dev *max77686);
extern int max77686_irq_resume(struct max77686_dev *max77686);

extern int max77686_read_reg(struct i2c_client *i2c, u8 reg, u8 *dest);
extern int max77686_bulk_read(struct i2c_client *i2c, u8 reg, int count, u8 *buf);
extern int max77686_write_reg(struct i2c_client *i2c, u8 reg, u8 value);
extern int max77686_bulk_write(struct i2c_client *i2c, u8 reg, int count, u8 *buf);
extern int max77686_update_reg(struct i2c_client *i2c, u8 reg, u8 val, u8 mask);

#endif /*  __LINUX_MFD_MAX77686_PRIV_H */
